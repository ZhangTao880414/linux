#+TITLE: 第五课

* shell脚本
  - 条件判断
    #+BEGIN_EXAMPLE
    if condition1; then
        command
    elif  condition2; then
        command
    else
        command
    fi
    #+END_EXAMPLE
    - =read -p "please input your name:" a=
    - =[ -e filename ]   [ -d filename] [-f filename]=
    - 循环
      - for循环 =for i in `seq 1 10`;do echo$i; done=
      - while循环
	#+BEGIN_EXAMPLE
	while :;
	    do
	    command break;
	    done
	#+END_EXAMPLE

* 查看系统负载
  - w命令 uptime

  - 查看cpu的核数    cat /proc/cpuinfo
    #+BEGIN_EXAMPLE
    # 总核数 = 物理CPU个数 X 每颗物理CPU的核数 
    # 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数
    # 查看物理CPU个数
    cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l
    # 查看每个物理CPU中core的个数(即核数)
    cat /proc/cpuinfo| grep "cpu cores"| uniq
    # 查看逻辑CPU的个数 
    cat /proc/cpuinfo| grep "processor"| wc -l
    #+END_EXAMPLE

* vmstat命令
  
  - vmstat 1 10

    [[file:image/vmstat.png]]

    #+BEGIN_EXAMPLE
    r      表示运行队列(就是说多少个进程真的分配到CPU)
    b      表示阻塞的进程
    buff   等待写入磁盘的缓冲大小
    cache  cpu和内存读出磁盘
    si     每秒从磁盘读入虚拟内存的大小
    so    每秒虚拟内存写入磁盘的大小
    bi     块设备每秒接收的块数量
    bo     块设备每秒发送的块数量
    us     用户进程占用cpu
    wa     等待IO的时间
    #+END_EXAMPLE
    可以参考这个[[http://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html][猛击]]

* top
  - =top -bn1= 打印一次top命令的结果后退出
  - =top -c= 和top后, 再按c键效果相同
  - PR和NI

    PR为线程优先级，范围[0, 40)，实时优先级的线程显示为RT, 值越小优先级越高;

    NI为Nice值，范围[-20, 20)，PR值为初始线程优先级加上Nice值
  - cpu的使用率
    
    用户态(user)、低优先级用户态(nice)、系统(sys)、闲置(idle)、IOWAIT(内核2.5.41+)、中断(since 2.6.0+)、软终端(since 2.6.0+)、steal(虚拟环境中其他OS消耗2.6.11+)、guest(为访客OS运行虚拟CPU消耗2.6.24)

* 查看io
  - =iostat -x 1 10= 没有这个命令安装这个包sysstat

    [[file:image/iostat.png]]

    %util   就是有多少没有写进磁盘，等待需要写进磁盘的，如果过高，就要查看进程了;
  - =iotop= =yum install iotop=

    iotop可查看到io占比比较高的是那个进程

* sar
  这个命令和iostat命令同属一个包, 如果没有这个命令, 则 =yum install -y sysstat=

  功能最强大，监控系统所有资源，包括平均负载，网卡流量，磁盘状态，内存使用

  库文件放在 /sar/log/sa，以天为单位存放

  cat 可以看sar加日期的文件, sar命令默认读取当前日期的sa文件, 如果文件不存在, 使用 =sar -o 17= 生成, 17代表本月17号

  常见方法为
  #+BEGIN_EXAMPLE
  sar -n DEV                      #查看当天从零点到当前时间的网卡流量信息
  sar -n DEV 1 10                 #每秒显示一次，共显示10次
  sar -n DEV -f /var/log/sa/saxx  #查看xx日的网卡流量历史
  sar -q                          #查看历史负载
  sar -b                          #查看磁盘读写
  sar -p                          查看CPU使用率                 
  #+END_EXAMPLE
  详细用法
  #+BEGIN_EXAMPLE
  -A：所有报告的总和
  -u：输出CPU使用情况的统计信息
  -v：输出inode、文件和其他内核表的统计信息
  -d：输出每一个块设备的活动信息
  -r：输出内存和交换空间的统计信息
  -b：显示I/O和传送速率的统计信息
  -a：文件读写情况
  -c：输出进程统计信息，每秒创建的进程数
  -R：输出内存页面的统计信息
  -y：终端设备活动情况
  -w：输出系统交换活动信息
  #+END_EXAMPLE

  安装nethogs =yum  -y  install nethogs= 查看进程流量

* free -h  -m
  -h centos6.5没有此选项, centos7有

  提问：如何查看真正的物理剩于内存 free+buffer+cache

* ps -ef    aux
  - ps -efL     (其中NLWP)就是线程数
    #+BEGIN_EXAMPLE
    UID为User ID.
    PID为processid,进程标识符
    PPID为 parent processid，父进程标识符2，
    LWP为light weight process orthread， 轻量级进程，即线程标识符
    NLWP为，number oflwps(threads) in the process, 线程的数量
    #+END_EXAMPLE
  - 一般配合kill命令使用
    #+BEGIN_EXAMPLE
    killall 进程名 批量杀同名的多个进程
    kill -9 进程号    #强制杀掉
    #+END_EXAMPLE

* netstat -anp  -nlp(listen本机开启的端口以及socket)
  established 已建立连接

  time-wait 等待数

  一般配合awk 脚本过滤出指定列
* tcpdump和tshark
  #+BEGIN_EXAMPLE
  关键字
  host    主机
  net        网段
  port       端口
  src           源
  dst          目标
  tcp   
  udp
  arp
  and 
  not
  !
  -e   mac地址
  #+END_EXAMPLE
  =tcpdump -nn -i eth0  \(not src net 10.63.96.0/24 and dst host 10.63.96.98\) or \(src host 10.63.96.98 and not dst net 10.63.96.0/24\)=

** tcpdump 与wireshark
   Wireshark(以前是ethereal)是Windows下非常简单易用的抓包工具。但在Linux下很难找到一个好用的图形化抓包工具;

   还好有Tcpdump; 我们可以用Tcpdump + Wireshark 的完美组合实现：在 Linux 里抓包，然后在Windows 里分析包:

   =tcpdump tcp -i eth1 -t -s 0 -c 100 and dst port ! 22 and src net 192.168.1.0/24 -w ./target.cap=

   #+BEGIN_EXAMPLE
   (1)tcp: ip icmp arp rarp 和 tcp、udp、icmp这些选项等都要放到第一个参数的位置，用来过滤数据报的类型
   (2)-i eth1 : 只抓经过接口eth1的包
   (3)-t : 不显示时间戳
   (4)-s 0 : 抓取数据包时默认抓取长度为68字节。加上-s 0 后可以抓到完整的数据包
   (5)-c 100 : 只抓取100个数据包
   (6)dst port ! 22 : 不抓取目标端口是22的数据包
   (7)src net 192.168.1.0/24 : 数据包的源网络地址为192.168.1.0/24
   (8)-w ./target.cap : 保存成cap文件，方便用ethereal(即wireshark)分析
   #+END_EXAMPLE

* selinux
  - 获取selinux状态 =getenforce=

    可能出现的结果有: enforcing(默认), permissive, disabled

    当然, 也可以使用 /sestatus/ 
  - 临时设定selinux状态, 重启后还原 =setenforce 0=

    若要永久生效, 则要 =vim /etc/sysconfig/selinux= (这是一个指向selinux配置文件的软链接), 作如下修改
    #+BEGIN_EXAMPLE
    - SELINUX=enforcing
    + SELINUX=disabled
    #+END_EXAMPLE
    注: '-' 代表删除, '+' 代表增加

* iptables

  [[file:第一课.org]]

5.12 crontab
# .----------------分钟 (0 - 59)
# |  .------------- 小时 (0 - 23)
# |  |  .----------  日 (1 - 31)
# |  |  |  .-------  月 (1 - 12)
# |  |  |  |  .----   周 (0 - 6) (周日=0 or 7) 
# |  |  |  |  | 
# * *  * *  * user-name command to be executed
cron 也是一个服务，所以需要先启动服务才能生效：service crond start; service crond status 
提问：
        每4小时执行/export/1.sh呢？
        执行的日志在什么地方：/var/log/cron
5.13自定义的服务
    vim /etc/init.d/redis
    chkconfig --add redis    
    chkconfig redis on
5.14 xargs  exec
    xargs是针对文件的:ls *.txt |rm 
    find /export -mtime +6 -size -100m  |xargs rm -rf
    cat 1.txt |xargs
    find /export -mtime +6 -size 100m -exec rm -rf {} \;
5.15 curl
    curl -I www.baidu.com
    curl -x 192.168.147.128 www.baidu.com    ##-x制定代理的主机和端口
    本机的话要么加/etc/hosts,要么加-x
    直接运行可以查看源代码
用法1：curl -I    省略源代码  
常见的状态码   200 301 302  403 404 502 503 只有200是正常的 301 302 有可能是有做跳转
301：所请求的页面已经转移至新的url。
302：所请求的页面已经临时转移至新的url。
403：对被请求页面的访问被禁止
404：服务器无法找到被请求的页面。
501：请求未完成。服务器不支持所请求的功能。
502：请求未完成。服务器从上游服务器收到一个无效的响应。
用法2：curl -x   相当于代理
用法3：curl -U username:password 访问有需要用户名名和密码的站点
用法4：curl -O   下载东西，小写o是可以更改文件名
用法5：curl -IV 查看访问过程
300-399：重定向
400-499：客户端
500-599：服务端，location什么的
5.16 wget
    wget www.baidu.com/1.rpm
5.17 dig  nslookup
    没有dig安装哪个包bind-utils
    dig @114.114.114.114 www.baidu.com
5.18 sreen   nohup    &
    nohup top &
    nohup：有时候终端退出时，进城也结束了，有个nohup保险
    nohup.out
5.19 rsync
    思路：1.复制 rsync -avL admin@192.168.1.102:/export/1.txt ./
                rsync -avL ./1.txt admin@192.168.1.102:/export/
           2.服务端模式：rsync -avL admin@192.168.147.129::admin/129.txt ./ --password-file=/home/admin/rsyncd.passwd
5.20 日志
    硬件：
    dmesg |grep -i 'error'
    登录认证：
    tail -100f /var/log/secure
    last
    /var/log/messages： 系统里面大部分日志都是在/var/log/messages里面，查问题时，这个日志是不能忽略的，比如内核相关的问题，当你的机器访问量特别大时，这个日志里面就会记录一些内核异常的错误。
/var/log/wtmp： wtmp这个是查看登录历史的，last 命令看就是这个日志
/var/log/btmp： btmp是查看登录历史中没有正确登录的那些ip，用lastb查看
/var/log/maillog：maillog 当然是记录邮件相关日志的，当你发邮件不成功，不正常时就看这个日志
/var/log/secure：secure 是安全相关的日志，比如我们以后讲到ftp不能正常登录时，就是看这个日志
/var/log/dmesg：dmesg 这个日志是系统开机时，记录的一些硬件信息，很少看这个日志

5.21 route
route -n   以ip地址的形式显示，不显示主机名
route add -host $vip  dev lo:0
route del $vip
增加路由
查看路由信息，路由等
route -n
netstart -r
ifconfig eth1 $vip up                 报错
ifconfig lo:0 $vip up                  正常
lo:0一个网卡绑定多个ip， eth1没有这个网卡
5.22. uname -a      cat  /etc/issu 
    cat /etc/redhat-release 
